import pygame
import time
import random


correct_num = 0

class GameBackground(object):
    def __init__(self, screen):
        self.screen = screen
"""调关卡看这里ABCDEF分别为1, 2, 3, 4, 5, 6"""
num_id = [1, 2, 6, 3, 5, 4,
          2, 3, 1, 4, 6, 5,
          3, 4, 2, 5, 1, 6,
          4, 5, 3, 6, 2, 1,
          6, 6, 4, 1, 3, 2,
          6, 1, 5, 2, 4, 3]

save_path = r'F:\exmple.txt' # 保存文件路径

class Manager(object):
    """改参数看这里"""
    high = [100, -100] # 调整上下的距离这里分别是调为100个像素点
    bg_size = (780, 780)# 调整背景的大小
    center = (bg_size[0]//2, bg_size[1]//2) # 调整中心点的位置
    Arrowhead = ['>> >> >> >> >>', '>> >> << >> >>', '<< << >> << <<', '<< << << << <<'] # 调整箭头的样例，注意中间的箭头不要换方向
    Arrowhead_B = ['>> >> >> >> >>', '>> >> << << <<', '<< << >> >> >>', '<< << << << <<'] # 调整箭头的样例，注意中间的箭头不要换方向
    foresight_size = 15 # 调整中心点的大小
    epoch = 1  # 开始轮次显示
    Arrowhead_size = 15 # 调整箭头的大小
    font_size = 15 # 调整字体大小
    OverEpoch = 3 # 调整结束轮次
    DelayTime = 0.5 # 调整提示时长 要小于TimeLess
    TimeLess = 3 # 调整一关的最短时间
    TimeMost = 4.2 # 调整一关的最长时间
    DateLess = 0.4 # 剔除无用数据的最短时间
    DateMost = 2.5 # 剔除无用数据的最长时间



    """这下面的不要动喔"""
    i = 0
    Arrowhead_x = center[0]
    Arrowhead_y = center[1] + high[random.randint(0, 1)]
    Arrowhead_Change_id = 10
    clock = pygame.time.Clock()
    Scores = 0
    Error = 0

    A = []
    B = []
    C = []
    D = []
    E = []
    F = []
    S = []
    US = []


    def __init__(self):
        """改参数看这里"""
        pygame.init()
        self.background_color = (0, 0, 0) # 背景的颜色
        self.font_color = (255, 255, 255) # 字体颜色
        self.Arrowhead_color = (255, 255, 255)# 箭头颜色
        self.center_color = (255, 255, 255) # 中心准心颜色


        """下面不要动喔"""

        self.score = 0
        self.pre_time = time.time()
        self.cur_time = time.time()
        self.screen = pygame.display.set_mode(Manager.bg_size)
        pygame.display.set_caption("RT Test Game")
        self.map = GameBackground(self.screen)
        self.vigilance = 0
        self.targeted = 0
        self.implementation = 0
        self.unused = 0
        self.Vig_List = []
        self.Targ_List = []
        self.Imp_List = []
        self.UNUSEFULL_LIST = []
        self.accuracy = 0
        self.AVGP = 0
        self.opengameflage = False
        self.score_save_flag = False

    def Avg(self):
        return (sum(Manager.S) + sum(Manager.US)) / (len(Manager.S) + len(Manager.US)) if len(Manager.S) != 0 or\
                                                                                           len(Manager.US) != 0 else 0

    def Score_V(self):
        # print(len(Manager.A))
        if (len(Manager.A) + len(Manager.B)) != 0 and (len(Manager.C) + len(Manager.D)) != 0:
            VA = sum(Manager.A) + sum(Manager.B)
            VB = sum(Manager.C) + sum(Manager.D)
            VA = VA/(len(Manager.A) + len(Manager.B))
            VB = VB/(len(Manager.C) + len(Manager.D))
            return VA - VB
        else:
            return 0

    def Score_T(self):
        if (len(Manager.E) + len(Manager.F)) != 0 and (len(Manager.C) + len(Manager.D)) != 0:
            VA = sum(Manager.E) + sum(Manager.F)
            VB = sum(Manager.C) + sum(Manager.D)
            VA = VA/(len(Manager.E) + len(Manager.F))
            VB = VB/(len(Manager.C) + len(Manager.D))
            return VB - VA
        else:
            return 0

    def Score_I(self):
        if len(Manager.S) * len(Manager.US) != 0:
            VA = sum(Manager.S)/len(Manager.S)
            VB = sum(Manager.US)/len(Manager.US)
            return VB - VA
        else:
            return 0


    def exit(self):
        print("Exit")
        pygame.quit()
        exit()

    def mode1(self):
        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN:
                self.exit()
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_UP and self.opengameflage == False:
                self.ans_dir = random.randint(0, 3)
                self.test_rect = self.drawText(f'%s' % Manager.Arrowhead[self.ans_dir], Manager.bg_size[0], Manager.bg_size[1],
                                               Manager.Arrowhead_size, self.background_color)
                Manager.Arrowhead_x = Manager.center[0] - self.test_rect.size[0]//2
                self.pre_time = time.time()
                self.text_rect = self.drawText(f'%s' % Manager.Arrowhead[self.ans_dir], Manager.Arrowhead_x,
                                               Manager.Arrowhead_y, Manager.Arrowhead_size, self.Arrowhead_color)
                self.opengameflage = True
                self.dy_time = random.randint(int(Manager.TimeLess*1000), int(Manager.TimeMost*1000))
                pygame.time.set_timer(Manager.Arrowhead_Change_id, self.dy_time)
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_UP and self.opengameflage == True:
                self.opengameflage = False
                pygame.time.set_timer(Manager.Arrowhead_Change_id, 0)
            elif event.type == Manager.Arrowhead_Change_id:
                self.score_save_flag = False
                if num_id[Manager.i] == 1:
                    self.pre_time = time.time()
                    Manager.Arrowhead_x = Manager.center[0] - self.test_rect.size[0]//2
                    Manager.Arrowhead_y = Manager.center[1] + Manager.high[random.randint(0, 1)]
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.ans_dir = random.randint(0, 3)
                    self.text_rect = self.drawText(f'%s' % Manager.Arrowhead[self.ans_dir], Manager.Arrowhead_x,
                                                   Manager.Arrowhead_y, Manager.Arrowhead_size, self.Arrowhead_color)
                elif num_id[Manager.i] == 2:
                    self.pre_time = time.time()
                    Manager.Arrowhead_x = Manager.center[0] - self.test_rect.size[0]//2
                    Manager.Arrowhead_y = Manager.center[1] + Manager.high[random.randint(0, 1)]
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.ans_dir = random.randint(0, 3)
                    self.text_rect = self.drawText(f'%s' % Manager.Arrowhead_B[self.ans_dir], Manager.Arrowhead_x,
                    Manager.Arrowhead_y, Manager.Arrowhead_size, self.Arrowhead_color)
                elif num_id[Manager.i] == 3:
                    Manager.Arrowhead_x = Manager.center[0] - self.test_rect.size[0]//2
                    Manager.Arrowhead_y =  Manager.center[1] + Manager.high[random.randint(0, 1)]
                    pygame.draw.rect(self.screen, self.background_color, self.text_center)
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.text_center = self.drawText('*',  Manager.center[0],  Manager.center[1], Manager.foresight_size, self.center_color)
                    pygame.display.update()
                    time.sleep(Manager.DelayTime)
                    # pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.ans_dir = random.randint(0, 3)
                    # time.sleep(1.2)
                    self.pre_time = time.time()
                    self.text_rect = self.drawText(f'%s' % Manager.Arrowhead[self.ans_dir], Manager.Arrowhead_x,
                                                     Manager.Arrowhead_y, Manager.Arrowhead_size, self.Arrowhead_color)
                    pygame.draw.rect(self.screen, self.background_color, self.text_center)
                    self.text_center = self.drawText('+',  Manager.center[0],  Manager.center[1], Manager.foresight_size, self.center_color)
                elif num_id[Manager.i] == 4:
                    Manager.Arrowhead_x = Manager.center[0] - self.test_rect.size[0]//2
                    Manager.Arrowhead_y = Manager.center[1] + Manager.high[random.randint(0, 1)]
                    pygame.draw.rect(self.screen, self.background_color, self.text_center)
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.text_center = self.drawText('*',  Manager.center[0],  Manager.center[1], Manager.foresight_size, self.center_color)
                    pygame.display.update()
                    time.sleep(Manager.DelayTime)
                    # pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.ans_dir = random.randint(0, 3)
                    # time.sleep(1.2)
                    self.pre_time = time.time()
                    self.text_rect = self.drawText(f'%s' % Manager.Arrowhead_B[self.ans_dir], Manager.Arrowhead_x,
                                                   Manager.Arrowhead_y, Manager.Arrowhead_size, self.Arrowhead_color)
                    pygame.draw.rect(self.screen, self.background_color, self.text_center)
                    self.text_center = self.drawText('+',  Manager.center[0],  Manager.center[1], Manager.foresight_size, self.center_color)
                elif num_id[Manager.i] == 5:
                    # print(5)
                    pygame.draw.rect(self.screen, self.background_color, self.text_center)
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.text_center = self.drawText('+',  Manager.center[0],  Manager.center[1], Manager.foresight_size, self.center_color)
                    pygame.display.update()
                    # print(time.time() - self.pre_time)
                    Manager.Arrowhead_x = Manager.center[0] - self.test_rect.size[0]//2
                    Manager.Arrowhead_y =  Manager.center[1] + Manager.high[random.randint(0, 1)]
                    self.text_rect = self.drawText('*',  Manager.center[0], Manager.Arrowhead_y, Manager.foresight_size, self.center_color)
                    pygame.display.update()
                    time.sleep(Manager.DelayTime)
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.pre_time = time.time()
                    self.text_rect = self.drawText(f'%s' % Manager.Arrowhead[self.ans_dir], Manager.Arrowhead_x,
                                                   Manager.Arrowhead_y, Manager.Arrowhead_size, self.Arrowhead_color)
                elif num_id[Manager.i] == 6:
                    # print(6)
                    pygame.draw.rect(self.screen, self.background_color, self.text_center)
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.text_center = self.drawText('+',  Manager.center[0],  Manager.center[1], Manager.foresight_size, self.center_color)
                    pygame.display.update()
                    # print(time.time() - self.pre_time)
                    Manager.Arrowhead_x = Manager.center[0] - self.test_rect.size[0]//2
                    Manager.Arrowhead_y =  Manager.center[1] + Manager.high[random.randint(0, 1)]
                    self.text_rect = self.drawText('*',  Manager.center[0], Manager.Arrowhead_y, Manager.foresight_size, self.center_color)
                    pygame.display.update()
                    time.sleep(Manager.DelayTime)
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    self.pre_time = time.time()
                    self.text_rect = self.drawText(f'%s' % Manager.Arrowhead_B[self.ans_dir], Manager.Arrowhead_x,
                                                   Manager.Arrowhead_y, Manager.Arrowhead_size, self.Arrowhead_color)

                # print(Manager.i)
                Manager.i += 1
                if Manager.i == 36:
                    Manager.epoch += 1
                    self.Vig_List.append(self.vigilance)
                    self.Targ_List.append(self.targeted)
                    self.Imp_List.append(self.implementation)

                    pygame.draw.rect(self.screen, self.background_color, self.epoch_text)
                    self.epoch_text = self.drawText(f'Epoch: %s' % Manager.epoch, 0,
                                                    self.score_text.size[1] + self.Error_text.size[1], Manager.font_size,
                                                    self.font_color)

                    with open(save_path, 'a') as file:
                        file.write(f'Epoch: {Manager.epoch - 1}\n')
                        file.write(f'Score: {Manager.Scores}\n')
                        file.write(f'Error: {Manager.Error}\n')
                        file.write(f'VigilancePoint: {self.vigilance}\n')
                        file.write(f'TargetedPoint: {self.targeted}\n')
                        file.write(f'ImplementationPoint:{self.implementation}\n')
                        file.write(f'AverageTime:{self.AVGP}\n')
                        file.write(f'Accuracy:{self.accuracy}\n')
                        file.write(f'unusefulData:{self.unused}\n\n')
                        file.close()

                    self.UNUSEFULL_LIST.append(self.unused)
                    self.unused = 0
                    Manager.Scores = 0
                    Manager.Scores = 0
                    Manager.A = []
                    Manager.B = []
                    Manager.C = []
                    Manager.D = []
                    Manager.E = []
                    Manager.F = []
                    Manager.S = []
                    Manager.US = []
                    pygame.display.update()
                    if Manager.epoch == Manager.OverEpoch + 1:
                        with open(save_path, 'a') as file:
                            file.write('本次实验平均值为:\n')
                            file.write(f'VigilancePoint: {sum(self.Vig_List)/len(self.Vig_List)}\n')
                            file.write(f'TargetedPoint: {sum(self.Targ_List)/len(self.Targ_List)}\n')
                            file.write(f'ImplementationPoint:{sum(self.Imp_List)/len(self.Imp_List)}\n')
                            file.write(f'无效数据共有:{sum(self.UNUSEFULL_LIST)}\n\n')
                            file.close()
                        print('文件保存完毕')
                        self.exit()
                    # print('1 group over')
                    Manager.i = 0
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
                if self.ans_dir == 0 or self.ans_dir == 2 and self.score_save_flag == False:
                    self.score_save_flag = True
                    self.score += 1
                    self.cur_time = time.time()
                    self.sco_time = self.cur_time - self.pre_time
                    if self.sco_time >= Manager.DateLess and self.sco_time <= Manager.DateMost:
                        if self.ans_dir == 0:
                            Manager.S.append(self.sco_time)
                        else:
                            Manager.US.append(self.sco_time)
                        if num_id[Manager.i] == 1:
                            Manager.A.append(self.sco_time)
                        elif num_id[Manager.i] == 2:
                            Manager.B.append(self.sco_time)
                        elif num_id[Manager.i] == 3:
                            Manager.C.append(self.sco_time)
                        elif num_id[Manager.i] == 4:
                            Manager.D.append(self.sco_time)
                        elif num_id[Manager.i] == 5:
                            Manager.E.append(self.sco_time)
                        elif num_id[Manager.i] == 6:
                            Manager.F.append(self.sco_time)

                        pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                        pygame.draw.rect(self.screen, self.background_color, self.score_text)
                        pygame.draw.rect(self.screen, self.background_color, self.vigilance_text)
                        pygame.draw.rect(self.screen, self.background_color, self.implementation_text)
                        pygame.draw.rect(self.screen, self.background_color, self.targeted_text)
                        pygame.draw.rect(self.screen, self.background_color, self.accuracy_text)
                        pygame.draw.rect(self.screen, self.background_color, self.AVGP_text)
                        self.AVGP = self.Avg()
                        self.AVGP_text = self.drawText(f'AverageTime: %.2f s' % self.AVGP, 0,
                                                       4 * Manager.font_size, Manager.font_size,
                                                       self.font_color)
                        self.accuracy = self.score / (self.score + self.Error)
                        self.accuracy_text = self.drawText(f'Accuracy : %.2f' % self.accuracy, 0,
                                                           self.score_text.size[1] + self.Error_text.size[1] +
                                                           self.epoch_text.size[1], Manager.font_size, self.font_color)
                        self.vigilance = self.Score_V()
                        self.targeted = self.Score_T()
                        self.implementation = self.Score_I()
                        self.vigilance_text = self.drawText(f'Vigilance : %.2f' % self.vigilance, 0, Manager.bg_size[1] - Manager.font_size, Manager.font_size, self.font_color)
                        self.targeted_text = self.drawText(f'tatgeted : %.2f' % self.targeted, 0, Manager.bg_size[1] - Manager.font_size
                                                           - self.vigilance_text.size[1], Manager.font_size, self.font_color)
                        self.implementation_text = self.drawText(f'Implementation : %.2f' % self.implementation, 0, Manager.bg_size[1] - Manager.font_size
                                                                 - self.vigilance_text.size[1] - self.targeted_text.size[1], Manager.font_size,
                                                                 self.font_color)
                        Manager.Scores += 1
                        self.score_text = self.drawText(f'score: %s' % Manager.Scores, 0, 0, Manager.font_size, self.font_color)
                        pygame.display.update()
                    else:
                        pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                        self.unused += 1
                        print('本次数据无效,用时%f'% self.sco_time)
                        # print('right!')
                else:
                    self.score_save_flag = True
                    Manager.Error += 1
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    pygame.draw.rect(self.screen, self.background_color, self.Error_text)
                    pygame.draw.rect(self.screen, self.background_color, self.accuracy_text)
                    self.accuracy = self.score / (self.score + self.Error)
                    pygame.draw.rect(self.screen, self.background_color, self.AVGP_text)
                    self.AVGP = self.Avg()
                    self.AVGP_text = self.drawText(f'AverageTime: %.2f s' % self.AVGP, 0,
                                                   4 * Manager.font_size, Manager.font_size,
                                                   self.font_color)
                    self.accuracy_text = self.drawText(f'Accuracy : %.2f' % self.accuracy, 0,
                                                       self.score_text.size[1] + self.Error_text.size[1] +
                                                       self.epoch_text.size[1], Manager.font_size, self.font_color)
                    self.Error_text = self.drawText(f'Numbers of Error : %d' % Manager.Error, 0,
                                                    self.score_text.size[1], Manager.font_size, self.font_color)
                    pygame.display.update()
                    # print('Error')

            elif event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT and self.score_save_flag == False:
                self.score_save_flag = True
                if self.ans_dir == 1 or self.ans_dir == 3:
                    self.score += 1
                    self.cur_time = time.time()
                    self.sco_time = self.cur_time - self.pre_time
                    if self.sco_time >= Manager.DateLess and self.sco_time <= Manager.DateMost:
                        if self.ans_dir == 3:
                            Manager.S.append(self.sco_time)
                        else:
                            Manager.US.append(self.sco_time)
                        if num_id[Manager.i] == 1:
                            Manager.A.append(self.sco_time)
                        elif num_id[Manager.i] == 2:
                            Manager.B.append(self.sco_time)
                        elif num_id[Manager.i] == 3:
                            Manager.C.append(self.sco_time)
                        elif num_id[Manager.i] == 4:
                            Manager.D.append(self.sco_time)
                        elif num_id[Manager.i] == 5:
                            Manager.E.append(self.sco_time)
                        elif num_id[Manager.i] == 6:
                            Manager.F.append(self.sco_time)
                        # self.pre_time = time.time()
                        # print('right!')
                        pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                        pygame.draw.rect(self.screen, self.background_color, self.score_text)
                        pygame.draw.rect(self.screen, self.background_color, self.vigilance_text)
                        pygame.draw.rect(self.screen, self.background_color, self.implementation_text)
                        pygame.draw.rect(self.screen, self.background_color, self.targeted_text)
                        pygame.draw.rect(self.screen, self.background_color, self.accuracy_text)
                        pygame.draw.rect(self.screen, self.background_color, self.AVGP_text)
                        self.AVGP = self.Avg()
                        self.AVGP_text = self.drawText(f'AverageTime: %.2f s' % self.AVGP, 0,
                                                       4 * Manager.font_size, Manager.font_size,
                                                       self.font_color)
                        self.accuracy = self.score / (self.score + self.Error)
                        self.accuracy_text = self.drawText(f'Accuracy : %.2f' % self.accuracy, 0,
                                                           self.score_text.size[1] + self.Error_text.size[1] +
                                                           self.epoch_text.size[1], Manager.font_size, self.font_color)
                        self.vigilance = self.Score_V()
                        self.targeted = self.Score_T()
                        self.implementation = self.Score_I()
                        self.vigilance_text = self.drawText(f'Vigilance : %.2f' % self.vigilance, 0, Manager.bg_size[1] - Manager.font_size, Manager.font_size, self.font_color)
                        self.targeted_text = self.drawText(f'tatgeted : %.2f' % self.targeted, 0, Manager.bg_size[1] - Manager.font_size
                                                           - self.vigilance_text.size[1], Manager.font_size, self.font_color)
                        self.implementation_text = self.drawText(f'Implementation : %.2f' % self.implementation, 0, Manager.bg_size[1] - Manager.font_size
                                                                 - self.vigilance_text.size[1] - self.targeted_text.size[1], Manager.font_size,
                                                                 self.font_color)
                        Manager.Scores += 1
                        self.score_text = self.drawText(f'score: %s' % Manager.Scores, 0, 0, Manager.font_size, self.font_color)
                        pygame.display.update()
                    else:
                        pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                        self.unused += 1
                        print('本次数据无效,用时%f'% self.sco_time)
                else:
                    self.score_save_flag = True
                    # print('Error')
                    Manager.Error += 1
                    pygame.draw.rect(self.screen, self.background_color, self.text_rect)
                    pygame.draw.rect(self.screen, self.background_color, self.Error_text)
                    pygame.draw.rect(self.screen, self.background_color, self.accuracy_text)
                    self.accuracy = self.score / (self.score + self.Error)
                    pygame.draw.rect(self.screen, self.background_color, self.AVGP_text)
                    self.AVGP = self.Avg()
                    self.AVGP_text = self.drawText(f'AverageTime: %.2f s' % self.AVGP, 0,
                                                   4 * Manager.font_size, Manager.font_size,
                                                   self.font_color)
                    self.accuracy_text = self.drawText(f'Accuracy : %.2f' % self.accuracy, 0,
                                                       self.score_text.size[1] + self.Error_text.size[1] +
                                                       self.epoch_text.size[1], Manager.font_size, self.font_color)
                    self.Error_text = self.drawText(f'Numbers of Error : %d' % Manager.Error, 0,
                                                    self.score_text.size[1], Manager.font_size, self.font_color)
                    pygame.display.update()


        pygame.display.update()

    def drawText(self, text, x, y, textHeight=30, fontColor=(255, 0, 0), backgroundColor=None):
        font_obj = pygame.font.Font(r'text.ttf', textHeight)
        text_obj = font_obj.render(text, True, fontColor, backgroundColor)
        text_rect = text_obj.get_rect()
        text_rect.topleft = (x, y)
        self.screen.blit(text_obj, text_rect)
        return text_rect

    def main(self):
        self.pre_time = time.time()

        self.score_text = self.drawText(f'score: %s' % Manager.Scores, 0, 0, Manager.font_size, self.font_color)
        self.Error_text = self.drawText(f'Numbers of Error : %d' % Manager.Error, 0, self.score_text.size[1], Manager.font_size,
                                        self.font_color)
        self.epoch_text = self.drawText(f'Epoch: %s' % Manager.epoch, 0, self.score_text.size[1] + self.Error_text.size[1], Manager.font_size, self.font_color)
        self.accuracy_text = self.drawText(f'Accuracy : %d' % self.accuracy, 0, self.score_text.size[1] + self.Error_text.size[1] +
                                           self.epoch_text.size[1], Manager.font_size, self.font_color)
        self.AVGP_text = self.drawText(f'AverageTime: %d s' % self.AVGP, 0, 4 * Manager.font_size , Manager.font_size, self.font_color)
        self.vigilance_text = self.drawText(f'Vigilance : %d' % self.vigilance, 0, Manager.bg_size[1] - Manager.font_size, Manager.font_size, self.font_color)
        self.targeted_text = self.drawText(f'tatgeted : %d' % self.targeted, 0, Manager.bg_size[1] - Manager.font_size
                                           - self.vigilance_text.size[1], Manager.font_size, self.font_color)
        self.implementation_text = self.drawText(f'Implementation : %d' % self.implementation, 0, Manager.bg_size[1] - Manager.font_size
                                                 - self.vigilance_text.size[1] - self.targeted_text.size[1], Manager.font_size, self.font_color)
        self.text_center = self.drawText('+',  Manager.center[0],  Manager.center[1], Manager.foresight_size, self.center_color)
        while True:
            self.mode1()
            # time.sleep(random.randint(3, 4))4
            time.sleep(0.3)
            Manager.clock.tick(60)



if __name__ =='__main__':
    manager = Manager()
    manager.main()
    input('Pleaes input any key to exit')
